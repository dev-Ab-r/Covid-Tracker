{"version":3,"sources":["components/Charts/Charts.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","reportWebVitals.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastupdate","myCurrentDate","Date","toLocaleDateString","className","styles","container","Grid","specing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","url","fetchData","country","a","defaultUrl","axios","get","fetchDailyData","modiFiedData","map","dailyData","total","date","reportDate","fetchAllCountries","countries","Charts","useState","setDailyData","useEffect","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChabge","setCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","name","App","state","console","log","fetchedData","setState","this","src","Image","alt","img","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c907c3bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card,CardContent,Typography,Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data:{confirmed,recovered,deaths,lastupdate}})=>{\n    if(!confirmed){\n        return 'Loading...'\n    }\n    let myCurrentDate = new Date().toLocaleDateString()\n\n    //console.log(recovered);\n    return(\n        <div className={styles.container}>\n            <Grid container specing ={3} justify='center'>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={confirmed.value} duration={1.5} separator=\",\"></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{myCurrentDate}</Typography>\n                        <Typography variant=\"body2\">No of Active Cases of Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\"></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{myCurrentDate}</Typography>\n                        <Typography variant=\"body2\">No of Recoveries  from Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deceased</Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp start={0} end={deaths.value} duration={1.5} separator=\",\"></CountUp>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{myCurrentDate}</Typography>\n                        <Typography variant=\"body2\">No of Deaths Caused due to Covid 19</Typography>\n                    </CardContent>\n\n                </Grid>\n\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from \"axios\";\n\nconst url='https://covid19.mathdro.id/api';\n//const indiaUrl ='https://api.covid19india.org/v4/min/data.min.json';\n\n  export const fetchData = async(country)=>{\n    let defaultUrl = url;\n    if(country){\n      defaultUrl =`${url}/countries/${country}`\n    }\n    try{\n      // const data = await axios.get(url);\n      // console.log(data);\n        const {data :{confirmed ,recovered,deaths,lastupdate}} = await axios.get(defaultUrl);\n        //const data= await axios.get(defaultUrl);\n        // const {data:{WB:{delta:{tested}}}} = await axios.get(indiaUrl);\n\n         //console.log(data);\n\n        // for(let key in data){\n        //   console.log(key);\n        // }\n       \n        return {confirmed,recovered,deaths,lastupdate};\n    }catch(error){\n\n    }\n  }\n\n  export const fetchDailyData = async ()=>{\n    try{\n      const {data} = await axios.get(`${url}/daily`)\n     // console.log(data)\n       const modiFiedData = data.map((dailyData)=>({\n         confirmed:dailyData.confirmed.total,\n         deaths:dailyData.deaths.total,\n         date:dailyData.reportDate,\n\n       }))\n       return modiFiedData;\n    }catch(error){\n\n    }\n    \n  }\n\n  export const fetchAllCountries = async ()=>{\n    try{\n      const {data:{countries}} = await axios.get(`${url}/countries`)\n      return countries ;\n    }catch (error){\n\n    }\n   \n  }","import React,{useState,useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line,Bar} from 'react-chartjs-2';\nimport styles from './Charts.module.css';\nconst Charts = ({data:{confirmed,recovered,deaths}, country})=>{\n const [dailyData,setDailyData]= useState([]);\n\n useEffect(()=>{\n     const fetchData = async()=>{\n        setDailyData(await fetchDailyData()) ;\n     }\n     fetchData();\n },[])\n //console.log(dailyData);\n const lineChart = (\n    dailyData[0] ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n          datasets: [{\n            data: dailyData.map((data) => data.confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          }, {\n            data: dailyData.map((data) => data.deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true,\n          }\n          ],\n        }}\n      />\n    ) : null\n  );\n\n  const barChart = (\n    confirmed?(<Bar\n      data={{\n        labels:['Infected','Recovered','Deceased'],\n        datasets:[{\n          label:'People',\n          backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,.5)'],\n          data:[confirmed.value,recovered.value,deaths.value]\n        }]\n      }}\n\n    options={{\n      legend:{display:false},\n      title:{display :true,text :`Current State in ${country}`}\n    }}\n    \n    />):'null')\n\n    return(\n        <div className={styles.container}>\n            {country?barChart:lineChart}\n        </div>\n    )\n}\n\nexport default Charts;","import React,{useState,useEffect} from 'react';\nimport { NativeSelect,FormControl, StylesProvider } from '@material-ui/core';\nimport {fetchAllCountries} from '../../api';\nimport styles from './CountryPicker.module.css';\n\n\nconst CountryPicker = ({handleCountryChabge})=>{\n    const[countries,setCountries]=useState([])\n\n    useEffect(()=>{\n        const fetchCountries = async ()=>{\n            setCountries(await fetchAllCountries())\n        }\n        fetchCountries();\n    },[setCountries])\n//console.log(countries);\n    return(\n       \n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={(e)=>handleCountryChabge(e.target.value)}>\n                <option value=\"\">Global</option>\n                {\n                    countries.map((country,i)=><option className={styles.formControl} key ={i}value={country.name}>{country.name}</option>)\n                }\n                \n            </NativeSelect>\n        </FormControl>\n    )\n}\n\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { Component } from 'react';\nimport {Cards,Charts,CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport Image from './images/image.png';\n\nexport class App extends Component {\n  state={\n    data:{},\n    country:''\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData})\n  }\n\n   handleCountryChabge= async(country) =>{\n    console.log(country);\n    const fetchedData = await fetchData(country)\n    this.setState({data:fetchedData,country:country})\n  }\n  \n\n  render() {\n    const {data,country} = this.state;\n    //console.log(data);\n    return (\n      <div className={styles.container}>\n          <img  src ={Image} alt=\"Covid\" className={styles.img}/>\n          <Cards data ={data}/>\n          <CountryPicker handleCountryChabge ={this.handleCountryChabge}/>\n          <Charts country ={country} data ={data}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"img\":\"App_img__2TF4E\"};"],"sourceRoot":""}